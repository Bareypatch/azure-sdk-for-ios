// --------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// --------------------------------------------------------------------------

import AzureCore
import Foundation
// swiftlint:disable superfluous_disable_command
// swiftlint:disable identifier_name
// swiftlint:disable line_length
// swiftlint:disable cyclomatic_complexity

/// Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user.
public struct CommunicationIdentifierModel: Codable {
    // MARK: Properties

    /// Kind of the communication identifier.
    public let kind: CommunicationIdentifierKind
    /// Full Id of the identifier.
    public let id: String?
    /// The phone number in E.164 format.
    public let phoneNumber: String?
    /// The AAD object Id of the Microsoft Teams user.
    public let microsoftTeamsUserId: String?
    /// True if the identifier is anonymous.
    public let isAnonymous: Bool?
    /// The cloud that the identifier belongs to.
    public let cloud: CommunicationCloudEnvironmentModel?

    // MARK: Initializers

    /// Initialize a `CommunicationIdentifierModel` structure.
    /// - Parameters:
    ///   - kind: Kind of the communication identifier.
    ///   - id: Full Id of the identifier.
    ///   - phoneNumber: The phone number in E.164 format.
    ///   - microsoftTeamsUserId: The AAD object Id of the Microsoft Teams user.
    ///   - isAnonymous: True if the identifier is anonymous.
    ///   - cloud: The cloud that the identifier belongs to.
    public init(
        kind: CommunicationIdentifierKind, id: String? = nil, phoneNumber: String? = nil,
        microsoftTeamsUserId: String? = nil, isAnonymous: Bool? = nil,
        cloud: CommunicationCloudEnvironmentModel? = nil
    ) {
        self.kind = kind
        self.id = id
        self.phoneNumber = phoneNumber
        self.microsoftTeamsUserId = microsoftTeamsUserId
        self.isAnonymous = isAnonymous
        self.cloud = cloud
    }

    // MARK: Codable

    enum CodingKeys: String, CodingKey {
        case kind = "kind"
        case id = "id"
        case phoneNumber = "phoneNumber"
        case microsoftTeamsUserId = "microsoftTeamsUserId"
        case isAnonymous = "isAnonymous"
        case cloud = "cloud"
    }

    /// Initialize a `CommunicationIdentifierModel` structure from decoder
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.kind = try container.decode(CommunicationIdentifierKind.self, forKey: .kind)
        self.id = try? container.decode(String.self, forKey: .id)
        self.phoneNumber = try? container.decode(String.self, forKey: .phoneNumber)
        self.microsoftTeamsUserId = try? container.decode(String.self, forKey: .microsoftTeamsUserId)
        self.isAnonymous = try? container.decode(Bool.self, forKey: .isAnonymous)
        self.cloud = try? container.decode(CommunicationCloudEnvironmentModel.self, forKey: .cloud)
    }

    /// Encode a `CommunicationIdentifierModel` structure
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(kind, forKey: .kind)
        if id != nil { try? container.encode(id, forKey: .id) }
        if phoneNumber != nil { try? container.encode(phoneNumber, forKey: .phoneNumber) }
        if microsoftTeamsUserId != nil { try? container.encode(microsoftTeamsUserId, forKey: .microsoftTeamsUserId) }
        if isAnonymous != nil { try? container.encode(isAnonymous, forKey: .isAnonymous) }
        if cloud != nil { try? container.encode(cloud, forKey: .cloud) }
    }
}
